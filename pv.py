# -*- coding: utf-8 -*-
"""plantvillage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jzAwhqhhDOi_3-xodlo3vX3k2DWcBN_E

# Laying the groundwork

### Importing necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip uninstall -y Pillow
# !pip install Pillow==5.3.0
# !pip install image
# !pip3 install torchvision==0.2.2

import copy
import json
import os
import glob
import time
from collections import OrderedDict
from os.path import exists

import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn.functional as F
import torchvision
import zipfile
from PIL import Image
from torch import nn, optim
from torch.autograd import Variable
from torch.optim import lr_scheduler
from torchvision import datasets, models, transforms

"""## Enable training with GPU

To facilitate our training process, we check if GPU is available; if not, we can turn it on by going to Menu > Runtime > Change Runtime Type > Hardware Accelerator > GPU
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

# check if CUDA is available
gpu_available = torch.cuda.is_available()

if not gpu_available:
    print('CUDA is not available. Training will be done with CPU.')
else:
    print('CUDA is available. Training will be done with GPU.')
torch_device = torch.device("cuda:0" if torch.cuda.is_available() else "CPU")
torch_device

"""## Obtain training data

Download training data
"""

#Organizing the dataset
data_dir = '/content/PlantVillage'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/val'
nThreads = 4
batch_size = 32
use_gpu = torch.cuda.is_available()

"""Below is the list of categories"""

with open('/content/drive/My Drive/categories.json', 'r') as f:
    categories_dict = json.load(f)
    for k, v in categories_dict.items():
      print(k)

"""Define transformation for the training and validation datasets using data augmentation and normalization for training."""

data_transforms = {
    'train': transforms.Compose([
        transforms.RandomRotation(30),
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'val': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Load the datasets with ImageFolder

data_dir = '/content/PlantVillage'
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          data_transforms[x])
                  for x in ['train', 'val']}

# Using the image datasets and the trainforms, define the dataloaders
dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], 
                                              batch_size=batch_size,
                                              shuffle=True, 
                                              num_workers=4) 
               for x in ['train', 'val']}

dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}

class_names = image_datasets['train'].classes

"""###First, we use the Resnet-152 pretrained model to obtain image features, then build and train a new feed-forward classifier with those features.

1. Obtain the pretrained model
"""

model = models.resnet152(pretrained=True)
for param in model.parameters():
    param.requires_grad = False

"""2. Build a new feed-forward network as a classifier with ReLU activations"""

# Creating the classifier ordered dictionary first
classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(2048, 512)),
                          ('relu', nn.ReLU()),
                          ('fc2', nn.Linear(512, 39)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

# Replacing the pretrained model classifier with our classifier
model.fc = classifier

"""Below is the function for training models"""

def train_model(model, criterion, optimizer, scheduler, num_epochs=20):
    since = time.time()
    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(1, num_epochs+1):
        print('Epoch {}/{}'.format(epoch, num_epochs))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                scheduler.step()
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs, labels = inputs.to(device), labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    loss = criterion(outputs, labels)
                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best valid accuracy: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

# Train with a pre-trained network
if use_gpu:
    print("Using GPU: " + str(use_gpu))
    model = model.cuda()

# NLLLoss because our output is LogSoftmax
criterion = nn.NLLLoss()

# Adam optimizer with a learning rate
optimizer = optim.Adam(model.fc.parameters(), lr=0.001)

# Decay LR by a factor of 0.1 every 5 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)


model_ft = train_model(model, criterion, optimizer,
                       exp_lr_scheduler, num_epochs=10)

"""After training, we save the model as a checkpoint."""

# Save the checkpoint 
model.class_to_idx = dataloaders['train'].dataset.class_to_idx
model.epochs = num_epochs
checkpoint = {'input_size': [3, 224, 224],
              'batch_size': dataloaders['train'].batch_size,
              'output_size': 39,
              'state_dict': model.state_dict(),
              'data_transforms': data_transforms,
              'optimizer_dict': optimizer.state_dict(),
              'class_to_idx': model.class_to_idx,
              'epoch': model.epochs}
torch.save(checkpoint, '/content/plants9615_checkpoint.pth')

"""Correspondingly, there's a function for loading the checkpoint."""

def load_checkpoint(filepath):
    checkpoint = torch.load(filepath)
    model = models.resnet152()

    # Our input_size matches the in_features of pretrained model
    input_size = 2048
    output_size = 39

    classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(2048, 512)),
                          ('relu', nn.ReLU()),
                          ('fc2', nn.Linear(512, 39)),
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

# Replacing the pretrained model classifier with our classifier
    model.fc = classifier

    model.load_state_dict(checkpoint['state_dict'])

    return model, checkpoint['class_to_idx']

# Get index to class mapping
loaded_model, class_to_idx = load_checkpoint('/content/plants9615_checkpoint.pth')
idx_to_class = {v: k for k, v in class_to_idx.items()}

"""## Testing our model

First, we process our image for testing by scaling, cropping, and normalizing.
"""

def process_image(image):
    size = 256, 256
    image.thumbnail(size, Image.ANTIALIAS)
    image = image.crop((128 - 112, 128 - 112, 128 + 112, 128 + 112))
    npImage = np.array(image)
    npImage = npImage/255.
        
    imgA = npImage[:,:,0]
    imgB = npImage[:,:,1]
    imgC = npImage[:,:,2]
    
    imgA = (imgA - 0.485)/(0.229) 
    imgB = (imgB - 0.456)/(0.224)
    imgC = (imgC - 0.406)/(0.225)
        
    npImage[:,:,0] = imgA
    npImage[:,:,1] = imgB
    npImage[:,:,2] = imgC
    
    npImage = np.transpose(npImage, (2,0,1))
    
    return npImage

"""To run prediction on our testing data, we wrote a method for predicting a single image."""

def predict(image_path, model, topk=3):
    image = torch.FloatTensor([process_image(Image.open(image_path))])
    model.eval()
    output = model.forward(Variable(image))
    prob = torch.exp(output).data.numpy()[0]
    

    top_idx = np.argsort(prob)[-topk:][::-1] 
    top_class = [idx_to_class[x] for x in top_idx]
    top_prob = prob[top_idx]

    return top_class[0]

"""For example, for this specific image, the predicted output is "background"."""

# print (predict('/content/test/test_imgs/0000697.jpg', loaded_model))

"""First obtain the testing image dataset"""

with zipfile.ZipFile('/content/gdrive/My Drive/test.zip', 'r') as zip_ref:
    zip_ref.extractall('/content/test')

"""Getting a list of names of the test images."""

test_img_names = []

os.chdir("/content/test/test_imgs")
for file in glob.glob("*.jpg"):
    test_img_names.append(file)

"""## Running prediction"""

result_dict = {}
for img in test_img_names:
    pred = predict('/content/test/test_imgs/'+img, loaded_model)
    result_dict[img] = pred

"""### Write result to a json file"""

with open('/content/gdrive/My Drive/result.json', 'w') as fp:
    json.dump(result_dict, fp)
